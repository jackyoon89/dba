SQL>REM
SQL>REM $Header: 215187.1 coe_xfr_sql_profile_2kmf3av4jqmgt_3521757961.sql 11.4.4.4 2020/11/17 carlos.sierra $
SQL>REM
SQL>REM Copyright (c) 2000-2012, Oracle Corporation. All rights reserved.
SQL>REM
SQL>REM AUTHOR
SQL>REM   carlos.sierra@oracle.com
SQL>REM
SQL>REM SCRIPT
SQL>REM   coe_xfr_sql_profile_2kmf3av4jqmgt_3521757961.sql
SQL>REM
SQL>REM DESCRIPTION
SQL>REM   This script is generated by coe_xfr_sql_profile.sql
SQL>REM   It contains the SQL*Plus commands to create a custom
SQL>REM   SQL Profile for SQL_ID 2kmf3av4jqmgt based on plan hash
SQL>REM   value 3521757961.
SQL>REM   The custom SQL Profile to be created by this script
SQL>REM   will affect plans for SQL commands with signature
SQL>REM   matching the one for SQL Text below.
SQL>REM   Review SQL Text and adjust accordingly.
SQL>REM
SQL>REM PARAMETERS
SQL>REM   None.
SQL>REM
SQL>REM EXAMPLE
SQL>REM   SQL> START coe_xfr_sql_profile_2kmf3av4jqmgt_3521757961.sql;
SQL>REM
SQL>REM NOTES
SQL>REM   1. Should be run as SYSTEM or SYSDBA.
SQL>REM   2. User must have CREATE ANY SQL PROFILE privilege.
SQL>REM   3. SOURCE and TARGET systems can be the same or similar.
SQL>REM   4. To drop this custom SQL Profile after it has been created:
SQL>REM      EXEC DBMS_SQLTUNE.DROP_SQL_PROFILE('coe_2kmf3av4jqmgt_3521757961');
SQL>REM   5. Be aware that using DBMS_SQLTUNE requires a license
SQL>REM      for the Oracle Tuning Pack.
SQL>REM   6. If you modified a SQL putting Hints in order to produce a desired
SQL>REM      Plan, you can remove the artifical Hints from SQL Text pieces below.
SQL>REM      By doing so you can create a custom SQL Profile for the original
SQL>REM      SQL but with the Plan captured from the modified SQL (with Hints).
SQL>REM
SQL>WHENEVER SQLERROR EXIT SQL.SQLCODE;
SQL>REM
SQL>VAR signature NUMBER;
SQL>VAR signaturef NUMBER;
SQL>REM
SQL>DECLARE
  2  sql_txt CLOB;
  3  h	     SYS.SQLPROF_ATTR;
  4  PROCEDURE wa (p_line IN VARCHAR2) IS
  5  BEGIN
  6  DBMS_LOB.WRITEAPPEND(sql_txt, LENGTH(p_line), p_line);
  7  END wa;
  8  BEGIN
  9  DBMS_LOB.CREATETEMPORARY(sql_txt, TRUE);
 10  DBMS_LOB.OPEN(sql_txt, DBMS_LOB.LOB_READWRITE);
 11  -- SQL Text pieces below do not have to be of same length.
 12  -- So if you edit SQL Text (i.e. removing temporary Hints),
 13  -- there is no need to edit or re-align unmodified pieces.
 14  wa(q'[SELECT INPUT_DESC, INPUT_VALUE, INPUT_TYPE, INPUT_SEQ, TRADE_TO_]');
 15  wa(q'[TARGET
 16  						 FROM PLUGIN_T]');
 17  wa(q'[RACK, ACCOUNTS_ALL
 18  						 ]');
 19  wa(q'[WHERE ACCOUNTS_ALL.NAME = :accountName
 20  			     ]');
 21  wa(q'[		       AND PLUGIN_NAME = :pluginName
 22  		  ]');
 23  wa(q'[				  AND MODULE = :model
 24  		 ]');
 25  wa(q'[				   AND PLUGIN_TRACK.ACCOUNT_ID = AC]');
 26  wa(q'[COUNTS_ALL.ID
 27  						 AND I]');
 28  wa(q'[S_EXPIRED = 0
 29  						 AND (]');
 30  wa(q'[(CAST(DATE_UPDATED AS DATE) - (SELECT CAST(MAX(DATE_UPDATED) AS ]');
 31  wa(q'[DATE)
 32  						 FROM PLUGIN_T]');
 33  wa(q'[RACK, ACCOUNTS_ALL
 34  						 ]');
 35  wa(q'[WHERE ACCOUNTS_ALL.NAME = :accountName
 36  			     ]');
 37  wa(q'[		       AND PLUGIN_NAME = :pluginName
 38  		  ]');
 39  wa(q'[				  AND MODULE = :model
 40  		 ]');
 41  wa(q'[				   AND PLUGIN_TRACK.ACCOUNT_ID = AC]');
 42  wa(q'[COUNTS_ALL.ID
 43  						 AND I]');
 44  wa(q'[S_EXPIRED = 0)) * 24 * 60 >= -5)
 45  				   ]');
 46  wa(q'[		 ORDER BY PLUGIN_TRACK.ACCOUNT_ID, PLUGIN_TRACK.PLU]');
 47  wa(q'[GIN_NAME, PLUGIN_TRACK.DATE_UPDATED DESC, PLUGIN_TRACK.INPUT_SEQ]');
 48  wa(q'[ DESC]');
 49  DBMS_LOB.CLOSE(sql_txt);
 50  h := SYS.SQLPROF_ATTR(
 51  q'[BEGIN_OUTLINE_DATA]',
 52  q'[IGNORE_OPTIM_EMBEDDED_HINTS]',
 53  q'[OPTIMIZER_FEATURES_ENABLE('11.2.0.3')]',
 54  q'[DB_VERSION('12.1.0.2')]',
 55  q'[OPT_PARAM('optimizer_index_cost_adj' 20)]',
 56  q'[OPT_PARAM('optimizer_index_caching' 80)]',
 57  q'[ALL_ROWS]',
 58  q'[OUTLINE_LEAF(@"SEL$2")]',
 59  q'[OUTLINE_LEAF(@"SEL$1")]',
 60  q'[FULL(@"SEL$1" "ACCOUNTS_ALL"@"SEL$1")]',
 61  q'[INDEX(@"SEL$1" "PLUGIN_TRACK"@"SEL$1" ("PLUGIN_TRACK"."PLUGIN_NAME" "PLUGIN_TRACK"."MODULE" "PLUGIN_TRACK"."ACCOUNT_ID"))]',
 62  q'[LEADING(@"SEL$1" "ACCOUNTS_ALL"@"SEL$1" "PLUGIN_TRACK"@"SEL$1")]',
 63  q'[USE_NL(@"SEL$1" "PLUGIN_TRACK"@"SEL$1")]',
 64  q'[NLJ_BATCHING(@"SEL$1" "PLUGIN_TRACK"@"SEL$1")]',
 65  q'[PUSH_SUBQ(@"SEL$2")]',
 66  q'[FULL(@"SEL$2" "ACCOUNTS_ALL"@"SEL$2")]',
 67  q'[INDEX(@"SEL$2" "PLUGIN_TRACK"@"SEL$2" ("PLUGIN_TRACK"."PLUGIN_NAME" "PLUGIN_TRACK"."MODULE" "PLUGIN_TRACK"."ACCOUNT_ID"))]',
 68  q'[LEADING(@"SEL$2" "ACCOUNTS_ALL"@"SEL$2" "PLUGIN_TRACK"@"SEL$2")]',
 69  q'[USE_NL(@"SEL$2" "PLUGIN_TRACK"@"SEL$2")]',
 70  q'[NLJ_BATCHING(@"SEL$2" "PLUGIN_TRACK"@"SEL$2")]',
 71  q'[END_OUTLINE_DATA]');
 72  :signature := DBMS_SQLTUNE.SQLTEXT_TO_SIGNATURE(sql_txt);
 73  :signaturef := DBMS_SQLTUNE.SQLTEXT_TO_SIGNATURE(sql_txt, TRUE);
 74  DBMS_SQLTUNE.IMPORT_SQL_PROFILE (
 75  sql_text	 => sql_txt,
 76  profile	 => h,
 77  name	 => 'coe_2kmf3av4jqmgt_3521757961',
 78  description => 'coe 2kmf3av4jqmgt 3521757961 '||:signature||' '||:signaturef||'',
 79  category	 => 'DEFAULT',
 80  validate	 => TRUE,
 81  replace	 => TRUE,
 82  force_match => FALSE /* TRUE:FORCE (match even when different literals in SQL). FALSE:EXACT (similar to CURSOR_SHARING) */ );
 83  DBMS_LOB.FREETEMPORARY(sql_txt);
 84  END;
 85  /

PL/SQL procedure successfully completed.

SQL>WHENEVER SQLERROR CONTINUE
SQL>SET ECHO OFF;

            SIGNATURE
---------------------
   372557571935113060


           SIGNATUREF
---------------------
   372557571935113060


... manual custom SQL Profile has been created

